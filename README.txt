UTEID: eab2982; dmd2479; dic223; 
FIRSTNAME: Eddie; Daniel; Dylan; 
LASTNAME: Babbe; Duncan; Inglis;
CSACCOUNT: dmduncan; babbe99; cinglis; 
EMAIL: daniel.duncan@utexas.edu; babbe2012@utexas.edu; dylanmcquade@yahoo.com;

Note: Professor Young has given us permission to work as a team of 3. You can confirm with him if needed.

[Program 4] [Description]
We have successful implemented the AES algorithm. We read the input in line by line, every 2 consecutive characters we put into an entry into an array. We would then cast it into a byte just incase the hex value of those 2 characters exceeded the capability of a signed byte variable. Once the state was filled, we proceeded to implement the 4 steps of AES required over the 10 rounds a 4x4 requires. In decryption we read it in line by line again and put in 2 characters of each index of the state array and then did the steps required for the decryption section of AES. We also skipped the line if it did not contain hex characters.  

[Finish] We have completely finished the assignment.

[Test Cases]
We have created 2 test cases:
[Input of test 1]
18378298374875678746783762762724
18378298374875678746783762762724
31658452365214523658963214fcdeab
18378298374875678746783762762724
18378298374875678746783762762724
31658452365214523658963214fcdeab
18378298374875678746783762762724
18378298374875678746783762762724
31658452365214523658963214fcdeab
18378298374875678746783762762724
18378298374875678746783762762724
31658452365214523658963214fcdeab
18378298374875678746783762762724
18378298374875678746783762762724
31658452365214523658963214fcdeab
383938382928278276272829dafbcfad
738226283949447493920202233fbcaf
cbfacdaefdcafedkjilpomn562316965

[Output of test 1]
18378298374875678746783762762724
18378298374875678746783762762724
31658452365214523658963214fcdeab
18378298374875678746783762762724
18378298374875678746783762762724
31658452365214523658963214fcdeab
18378298374875678746783762762724
18378298374875678746783762762724
31658452365214523658963214fcdeab
18378298374875678746783762762724
18378298374875678746783762762724
31658452365214523658963214fcdeab
18378298374875678746783762762724
18378298374875678746783762762724
31658452365214523658963214fcdeab
383938382928278276272829dafbcfad
738226283949447493920202233fbcaf

[Input of test 2]
18378298374875678746783762762724
18378298374875678746783762762724
31658452365214523658963214fcdeab
18378298374875678746783762762724
18378298374875678746783762762724
31658452365
18378298374875678746783762762724
abcdefabdefabcdefabcdefabcdefabc
18378298374875678746783762762724
18378298374875678746783762762724
31658452365214523658963214fcdeab
18378298374875678746783762762724
18378298374875678746783762762724
31658452365214523658963214fcdeab
383938382928278276272829dafbcfad
738226283949447493920202233fbcaf

[Output of test 2]
18378298374875678746783762762724
18378298374875678746783762762724
31658452365214523658963214fcdeab
18378298374875678746783762762724
18378298374875678746783762762724
31658452365000000000000000000000
18378298374875678746783762762724
abcdefabdefabcdefabcdefabcdefabc
18378298374875678746783762762724
18378298374875678746783762762724
31658452365214523658963214fcdeab
18378298374875678746783762762724
18378298374875678746783762762724
31658452365214523658963214fcdeab
383938382928278276272829dafbcfad
738226283949447493920202233fbcaf